#pragma once

#include <memory>
#include <list>
#include <string_view>

#include "Simplexer.hpp"

namespace Geoparse {

	// Visitor interface for syntax tree generated by Parser
	class ASTVisitorInterface {
		// TODO: implement visit() functions for all types of expressions
	};

	// Base class for all language constructions
	class ASTExpression {
	public:
		//virtual void accept(ASTVisitorInterface* visitor) = 0;
		virtual void debugPrint(std::size_t) = 0;
	};

	// GeoObject represents any data that take part in GEOLOG program
	// including numbers, strings, functions, user-defined classes
	//
	// Note: Hence GEOLOG will not have a garbage collector, instead it will
	// delete an object immediately
	//
	// Functions will have reference(variable) with its own name in order
	// not to delete it after creating
	class GeoObject : public ASTExpression {
	protected: // fields below should be accessible for ancestors
		std::string m_rawValue; // value that is in the program code
	public:
		void debugPrint(std::size_t) override;
	};

	// Built in integer class
	class GeoInterger : public GeoObject {
		int64_t m_value;
	public:
		GeoInterger(std::string_view);
	};

	// Built in rational class
	class GeoRational : public GeoObject {
		double_t m_value;
	public:
		GeoRational(std::string_view);
	};

	// Built in string class
	class GeoString : public GeoObject {
		std::string m_value;
	public:
		GeoString(std::string_view);
	};

	// Operator is a parent for u-,bi-,ternary, conditional, loop operators, etc.
	class Operator : public ASTExpression {
	public:
		void debugPrint(std::size_t) = 0;
	};

	// Represents binary operation, has left and right AST childs
	class BinaryOperator : public Operator {
		std::unique_ptr<ASTExpression> m_lhs;
		std::unique_ptr<ASTExpression> m_rhs;
		Simplexer::TokenType m_op;

	public:
		BinaryOperator(std::unique_ptr<ASTExpression> lhs, Simplexer::TokenType op, std::unique_ptr<ASTExpression> rhs);

		void debugPrint(std::size_t) override;
	};

	// Variable in GEOLOG is generally a reference to an GeoObject
	class Variable : public ASTExpression {
		std::string m_name;
	public:
		void debugPrint(std::size_t) override;
	};

	// Main interface to Geoparse
	class Parser {
	private:
		std::list<Simplexer::Token>::const_iterator m_currToken;
		//std::list<ASTExpression> m_AST;
		std::unique_ptr<ASTExpression> m_expr;

		std::unique_ptr<ASTExpression> expectExpression();
		std::unique_ptr<ASTExpression> expectPrimary();
		std::unique_ptr<ASTExpression> expectOneValue();
		std::unique_ptr<ASTExpression> expectBinaryOperation(std::unique_ptr<ASTExpression>, int);
		int operatorPrecedence(const Simplexer::TokenType);
	public:
		void parse(const std::list<Simplexer::Token>&);
		void debugPrint();
	};

}